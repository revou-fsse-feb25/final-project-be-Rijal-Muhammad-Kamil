// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id             Int                 @id @default(autoincrement())
  email               String              @unique @db.VarChar(51)
  first_name          String              @db.VarChar(51)
  last_name           String              @db.VarChar(51)
  date_of_birth       String
  gender              Gender
  phone_number        String              @unique @db.VarChar(51)
  password            String              @db.VarChar(255)
  role                Role                @default(ATTENDEE)
  avatar_url          String?             @db.VarChar(255)
  status              UserStatus          @default(ACTIVE)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?

  transactions        Transaction[]
  eventOrganizer      EventOrganizer?
}

model EventOrganizer {
  organizer_id        Int                 @id @default(autoincrement())
  user_id             Int                 @unique
  name                String              @unique @db.VarChar(127)
  address             String              @db.VarChar(255)
  description         String?
  logo_url            String?             @db.VarChar(255)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?

  user                User                @relation(fields: [user_id], references: [user_id])
  events              Event[]
}

model EventCategory {
  category_id         Int                 @id @default(autoincrement())
  name                String              @unique @db.VarChar(51)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?

  events              Event[]
}

model Event {
  event_id            Int                 @id @default(autoincrement())
  category_id         Int
  organizer_id        Int
  title               String              @db.VarChar(127)
  description         String
  terms               String
  location            String              @db.VarChar(127)
  image_url           String              @db.VarChar(255)
  status              EventStatus         @default(ACTIVE)
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?

  category            EventCategory       @relation(fields: [category_id], references: [category_id])
  organizer           EventOrganizer      @relation(fields: [organizer_id], references: [organizer_id])
  periods             EventPeriod[]
}

model EventPeriod {
  period_id            Int                @id @default(autoincrement())
  event_id             Int
  name                 String             @db.VarChar(127)
  start_date           String
  end_date             String
  start_time           String
  end_time             String
  status               PeriodStatus       @default(UPCOMING)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  deleted_at           DateTime?

  event                Event              @relation(fields: [event_id], references: [event_id])
  ticketTypes          TicketType[]
}

model TicketTypeCategory {
  category_id          Int                @id @default(autoincrement())
  name                 String             @unique @db.VarChar(51)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  deleted_at           DateTime?

  ticketTypes          TicketType[]
}

model TicketType {
  type_id              Int                @id @default(autoincrement())
  period_id            Int
  category_id          Int
  price                Decimal            @db.Decimal(10, 2)
  discount             Decimal?           @db.Decimal(10, 2)
  quota                Int
  status               TicketStatus       @default(AVAILABLE)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  deleted_at           DateTime?

  period               EventPeriod        @relation(fields: [period_id], references: [period_id])
  category             TicketTypeCategory @relation(fields: [category_id], references: [category_id])
  tickets              Ticket[]
}

model Ticket {
  ticket_id            Int                @id @default(autoincrement())
  type_id              Int
  transaction_id       Int?
  ticket_code          String             @unique @db.VarChar(51)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  deleted_at           DateTime?

  type                 TicketType         @relation(fields: [type_id], references: [type_id])
  transaction          Transaction?       @relation(fields: [transaction_id], references: [transaction_id])
}

model Transaction {
  transaction_id       Int                @id @default(autoincrement())
  user_id              Int?      
  total_price          Decimal            @db.Decimal(10, 2)
  payment_method       PAYMENT_METHOD
  status               TRANSACTION_STATUS @default(PENDING)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  deleted_at           DateTime?

  user                 User?              @relation(fields: [user_id], references: [user_id])
  tickets              Ticket[]
}

enum Role {
  ATTENDEE
  EVENT_ORGANIZER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum EventStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum PeriodStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum TicketStatus {
  AVAILABLE
  SOLD_OUT
}

enum TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum PAYMENT_METHOD {
  CREDIT_CARD
  BANK_TRANSFER
  OVO
  DANA
  GOPAY
}
