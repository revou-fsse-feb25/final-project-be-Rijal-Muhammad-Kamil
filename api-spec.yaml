openapi: 3.0.0
info:
  title: Ticketing API
  description: API for a ticketing platform where users can buy and sell event tickets.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        email:
          type: string
          format: email
          maxLength: 51
        phone_number:
          type: string
          maxLength: 51
          pattern: '^\+[1-9]\d{7,14}$'
          example: '+6281234567890'
        first_name:
          type: string
          maxLength: 51
          minLength: 3
        last_name:
          type: string
          maxLength: 51
          minLength: 3
        date_of_birth:
          type: string
          format: date
          example: '1990-01-01'
        gender:
          type: string
          enum: [MALE, FEMALE]
        password:
          type: string
          maxLength: 255
          minLength: 6
        role:
          type: string
          enum: [ATTENDEE, EVENT_ORGANIZER, ADMIN]
          default: ATTENDEE
        avatar_url:
          type: string
          maxLength: 255
          nullable: true
        status:
          type: string
          enum: [ACTIVE, SUSPENDED]
          default: ACTIVE
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    EventOrganizer:
      type: object
      properties:
        organizer_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 127
          minLength: 3
        address:
          type: string
          maxLength: 255
          minLength: 3
        description:
          type: string
          nullable: true
        logo_url:
          type: string
          maxLength: 255
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    EventCategory:
      type: object
      properties:
        category_id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 51
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    Event:
      type: object
      properties:
        event_id:
          type: integer
          format: int64
        category_id:
          type: integer
          format: int64
        organizer_id:
          type: integer
          format: int64
        title:
          type: string
          maxLength: 127
          minLength: 3
        description:
          type: string
          minLength: 3
        terms:
          type: string
          minLength: 3
        location:
          type: string
          maxLength: 127
          minLength: 3
        image_url:
          type: string
          maxLength: 255
          format: uri
        status:
          type: string
          enum: [ACTIVE, INACTIVE, COMPLETED]
          default: ACTIVE
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    EventPeriod:
      type: object
      properties:
        period_id:
          type: integer
          format: int64
        event_id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 127
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        start_time:
          type: string
          format: time
        end_time:
          type: string
          format: time
        status:
          type: string
          enum: [UPCOMING, ONGOING, COMPLETED]
          default: UPCOMING
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    TicketTypeCategory:
      type: object
      properties:
        category_id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 51
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    TicketType:
      type: object
      properties:
        type_id:
          type: integer
          format: int64
        period_id:
          type: integer
          format: int64
        category_id:
          type: integer
          format: int64
        price:
          type: number
          format: decimal
          minimum: 0
          multipleOf: 0.01
        discount:
          type: number
          format: decimal
          minimum: 0
          multipleOf: 0.01
          nullable: true
        quota:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [AVAILABLE, SOLD_OUT]
          default: AVAILABLE
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    Ticket:
      type: object
      properties:
        ticket_id:
          type: integer
          format: int64
        type_id:
          type: integer
          format: int64
        transaction_id:
          type: integer
          format: int64
          nullable: true
        ticket_code:
          type: string
          maxLength: 51
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    Transaction:
      type: object
      properties:
        transaction_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
          nullable: true
        total_price:
          type: number
          format: decimal
          multipleOf: 0.01
        payment_method:
          type: string
          enum: [CREDIT_CARD, BANK_TRANSFER, OVO, DANA, GOPAY]
        status:
          type: string
          enum: [PENDING, SUCCESS, FAILED, CANCELED]
          default: PENDING
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        password:
          type: string
          example: 'strongpassword123'
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        user:
          type: object
          properties:
            user_id:
              type: integer
            email:
              type: string
            role:
              type: string
              enum: [ATTENDEE, EVENT_ORGANIZER, ADMIN]
            status:
              type: string
              enum: [ACTIVE, SUSPENDED]
    CreateUserRequest:
      type: object
      required:
        - email
        - phone_number
        - first_name
        - last_name
        - date_of_birth
        - gender
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 51
          example: 'user@example.com'
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{7,14}$'
          example: '+6281234567890'
        first_name:
          type: string
          minLength: 3
          maxLength: 51
          example: 'John'
        last_name:
          type: string
          minLength: 3
          maxLength: 51
          example: 'Doe'
        date_of_birth:
          type: string
          format: date
          example: '1990-01-01'
        gender:
          type: string
          enum: [MALE, FEMALE]
          example: 'MALE'
        password:
          type: string
          minLength: 6
          maxLength: 51
          example: 'Password1!'
        role:
          type: string
          enum: [ATTENDEE, EVENT_ORGANIZER, ADMIN]
          default: ATTENDEE
    CreateEventOrganizerRequest:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 127
          example: 'We The Fest'
        address:
          type: string
          minLength: 3
          maxLength: 127
          example: 'Jl. Sudirman No. 123, Jakarta'
        description:
          type: string
          example: 'A leading event organizer in Indonesia'
        logo_url:
          type: string
          format: uri
          maxLength: 225
          example: 'https://example.com/logo.png'
    CreateEventRequest:
      type: object
      required:
        - category_id
        - title
        - description
        - terms
        - location
        - image_url
      properties:
        category_id:
          type: integer
          example: 1
        title:
          type: string
          minLength: 3
          maxLength: 127
          example: 'Music Festival 2025'
        description:
          type: string
          minLength: 3
          example: 'Detailed description'
        terms:
          type: string
          minLength: 3
          example: 'Terms and conditions'
        location:
          type: string
          minLength: 3
          maxLength: 127
          example: 'Jakarta'
        image_url:
          type: string
          format: uri
          maxLength: 255
          example: 'https://example.com/image.jpg'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, COMPLETED]
          example: 'ACTIVE'
    CreateTicketTypeRequest:
      type: object
      required:
        - category_id
        - price
        - quota
        - status
      properties:
        category_id:
          type: integer
          example: 1
        price:
          type: number
          format: decimal
          minimum: 0
          example: 100000.0
        discount:
          type: number
          format: decimal
          minimum: 0
          example: 5000.0
        quota:
          type: integer
          minimum: 0
          example: 100
        status:
          type: string
          enum: [AVAILABLE, SOLD_OUT]
          example: 'AVAILABLE'
    CreateTransactionRequest:
      type: object
      required:
        - payment_method
        - ticket_ids
      properties:
        payment_method:
          type: string
          enum: [CREDIT_CARD, BANK_TRANSFER, OVO, DANA, GOPAY]
          example: 'CREDIT_CARD'
        ticket_ids:
          type: array
          items:
            type: integer
          example: [1, 2, 3]
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 51
          example: 'user@example.com'
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{7,14}$'
          example: '+6281234567890'
        first_name:
          type: string
          minLength: 3
          maxLength: 51
          example: 'John'
        last_name:
          type: string
          minLength: 3
          maxLength: 51
          example: 'Doe'
        date_of_birth:
          type: string
          format: date
          example: '1990-01-01'
        gender:
          type: string
          enum: [MALE, FEMALE]
          example: 'MALE'
        avatar_url:
          type: string
          format: uri
          maxLength: 255
          nullable: true
          example: 'https://example.com/avatar.jpg'
        status:
          type: string
          enum: [ACTIVE, SUSPENDED]
          example: 'ACTIVE'
    UpdateEventOrganizerRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 127
          example: 'We The Fest'
        address:
          type: string
          minLength: 3
          maxLength: 127
          example: 'Jl. Sudirman No. 123, Jakarta'
        description:
          type: string
          example: 'A leading event organizer in Indonesia'
        logo_url:
          type: string
          format: uri
          maxLength: 225
          example: 'https://example.com/logo.png'
    UpdateEventRequest:
      type: object
      properties:
        category_id:
          type: integer
          example: 1
        title:
          type: string
          minLength: 3
          maxLength: 127
          example: 'Music Festival 2025'
        description:
          type: string
          minLength: 3
          example: 'Detailed description'
        terms:
          type: string
          minLength: 3
          example: 'Terms and conditions'
        location:
          type: string
          minLength: 3
          maxLength: 127
          example: 'Jakarta'
        image_url:
          type: string
          format: uri
          maxLength: 255
          example: 'https://example.com/image.jpg'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, COMPLETED]
          example: 'ACTIVE'
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        error:
          type: string
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User management
  - name: Event Organizer
    description: Event organizer management
  - name: Events
    description: Event management
  - name: Transactions
    description: Transaction management
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID (own profile or admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (own profile or admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /event-organizer:
    post:
      tags:
        - Event Organizers
      summary: Create event organizer profile
      description: Create a new event organizer profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventOrganizerRequest'
      responses:
        '201':
          description: Event organizer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Event Organizers
      summary: Get all event organizers
      description: Retrieve all event organizers (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of event organizers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventOrganizer'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /event-organizer/my-profile:
    get:
      tags:
        - Event Organizers
      summary: Get current user event organizer profile
      description: Get event organizer profile for the current authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user event organizer profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '403':
          description: Forbidden - Can only view own profile unless admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event organizer profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /event-organizer/{id}:
    get:
      tags:
        - Event Organizers
      summary: Get event organizer by ID
      description: Retrieve a specific event organizer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Event organizer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '404':
          description: Event organizer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Event Organizers
      summary: Update event organizer
      description: Update event organizer information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventOrganizerRequest'
      responses:
        '200':
          description: Event organizer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '404':
          description: Event organizer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Event Organizers
      summary: Soft delete event organizer
      description: Soft delete event organizer profile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Event organizer soft deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '404':
          description: Event organizer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Event Organizers
      summary: Delete event organizer
      description: Soft delete an event organizer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Event organizer deleted successfully
        '404':
          description: Event organizer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /events:
    post:
      tags:
        - Events
      summary: Create a new event
      description: Create a new event (event organizer only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Events
      summary: Get all events
      description: Retrieve all events with optional filters
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category name
        - name: location
          in: query
          schema:
            type: string
          description: Filter by location
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, COMPLETED]
          description: Filter by event status
        - name: search
          in: query
          schema:
            type: string
          description: Search in event title and description
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{id}:
    get:
      tags:
        - Events
      summary: Get event by ID
      description: Retrieve a specific event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Events
      summary: Update event
      description: Update event information (event organizer only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Events
      summary: Delete event
      description: Delete an event (event organizer only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Event deleted successfully
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /events/organizer/{organizer_id}:
    get:
      tags:
        - Events
      summary: Get events by organizer
      description: Retrieve all events for a specific organizer
      parameters:
        - name: organizer_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of events by organizer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '404':
          description: Organizer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /events/periods/{period_id}/ticket-types:
    post:
      tags:
        - Ticket Types
      summary: Create ticket type for event period
      description: Create a new ticket type for a specific event period
      security:
        - bearerAuth: []
      parameters:
        - name: period_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketTypeRequest'
      responses:
        '201':
          description: Ticket type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketType'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /transactions:
    post:
      tags:
        - Transactions
      summary: Create a new transaction
      description: Create a new ticket purchase transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /transactions/my-transactions:
    get:
      tags:
        - Transactions
      summary: Get my transactions
      description: Retrieve current user's transactions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
  /transactions/user/{userId}:
    get:
      tags:
        - Transactions
      summary: Get transactions by user ID
      description: Retrieve transactions for a specific user (admin or own)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of user transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get transaction by ID
      description: Retrieve a specific transaction by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Transactions
      summary: Update transaction
      description: Update transaction status or information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, SUCCESS, FAILED, CANCELED]
                payment_method:
                  type: string
                  enum: [CREDIT_CARD, BANK_TRANSFER, OVO, DANA, GOPAY]
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'