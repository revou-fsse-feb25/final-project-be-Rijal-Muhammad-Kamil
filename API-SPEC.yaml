openapi: 3.0.3
info:
  title: Event Management & Booking API
  version: 1.0.0
  description: |
    API lengkap untuk Event Management & Booking dengan RBAC (ATTENDEE & EVENT_ORGANIZER) dan JWT Authentication.
    
    **Role-Based Access Control:**
    - **ATTENDEE**: Dapat melihat events, membeli tiket, mengelola profil sendiri
    - **EVENT_ORGANIZER**: Dapat membuat dan mengelola events, melihat tiket untuk events mereka, mengelola profil sendiri

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication endpoints untuk login dan mendapatkan JWT token
  - name: User
    description: User management endpoints untuk mengelola data user
  - name: UserProfile
    description: User profile management untuk mengelola profil detail user
  - name: EventOrganizer
    description: Event organizer management (khusus untuk EVENT_ORGANIZER role)
  - name: EventCategory
    description: Event category management untuk kategorisasi events
  - name: Event
    description: Event management untuk membuat dan mengelola events
  - name: EventPeriod
    description: Event period management untuk mengelola periode/jadwal events
  - name: EventTerms
    description: Event terms & conditions management
  - name: TicketType
    description: Ticket type management untuk mengelola jenis-jenis tiket
  - name: Ticket
    description: Ticket management untuk pembelian dan pengelolaan tiket

paths:
  # ================= AUTH =================
  /auth/login:
    post:
      tags: [Auth]
      summary: Login user dan dapatkan JWT token
      description: Endpoint untuk autentikasi user menggunakan email dan password
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  # ================= USER =================
  /users:
    get:
      tags: [User]
      summary: Get current user info
      description: Mendapatkan informasi user yang sedang login
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [User]
      summary: Update current user
      description: Update informasi user yang sedang login
      operationId: updateCurrentUser
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [User]
      summary: Delete current user
      description: Hapus akun user yang sedang login
      operationId: deleteCurrentUser
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ================= USER PROFILE =================
  /users/profile:
    get:
      tags: [UserProfile]
      summary: Get current user profile
      description: Mendapatkan profil detail user yang sedang login
      operationId: getCurrentUserProfile
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [UserProfile]
      summary: Create user profile
      description: Membuat profil untuk user yang sedang login
      operationId: createUserProfile
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      requestBody:
        $ref: '#/components/requestBodies/UserProfileCreateRequest'
      responses:
        '201':
          description: User profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Profile already exists

    put:
      tags: [UserProfile]
      summary: Update current user profile
      description: Update profil user yang sedang login
      operationId: updateCurrentUserProfile
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      requestBody:
        $ref: '#/components/requestBodies/UserProfileUpdateRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [UserProfile]
      summary: Delete current user profile
      description: Hapus profil user yang sedang login
      operationId: deleteCurrentUserProfile
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ================= EVENT ORGANIZER =================
  /organizers:
    get:
      tags: [EventOrganizer]
      summary: Get current organizer info
      description: Mendapatkan informasi organizer untuk user yang sedang login
      operationId: getCurrentOrganizer
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      responses:
        '200':
          description: Organizer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [EventOrganizer]
      summary: Create organizer profile
      description: Membuat profil organizer untuk user yang sedang login
      operationId: createOrganizer
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      requestBody:
        $ref: '#/components/requestBodies/EventOrganizerCreateRequest'
      responses:
        '201':
          description: Organizer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Organizer already exists

    put:
      tags: [EventOrganizer]
      summary: Update current organizer
      description: Update informasi organizer yang sedang login
      operationId: updateCurrentOrganizer
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      requestBody:
        $ref: '#/components/requestBodies/EventOrganizerUpdateRequest'
      responses:
        '200':
          description: Organizer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrganizer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
       tags: [EventOrganizer]
       summary: Delete current organizer
       description: Hapus profil organizer yang sedang login
       operationId: deleteCurrentOrganizer
       security:
         - bearerAuth: []
       x-roles: [EVENT_ORGANIZER]
       responses:
         '204':
           $ref: '#/components/responses/NoContent'
         '401':
           $ref: '#/components/responses/Unauthorized'
         '403':
           $ref: '#/components/responses/Forbidden'
         '404':
           $ref: '#/components/responses/NotFound'

  # ================= EVENT CATEGORY =================
  /categories:
    get:
      tags: [EventCategory]
      summary: Get all event categories
      description: Mendapatkan semua kategori event (read-only untuk semua user)
      operationId: getAllCategories
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '200':
          description: List of event categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventCategory'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /categories/{category_id}:
    get:
      tags: [EventCategory]
      summary: Get event category by ID
      description: Mendapatkan kategori event berdasarkan ID
      operationId: getCategoryById
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/CategoryIdParam'
      responses:
        '200':
          description: Event category information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCategory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ================= EVENT =================
  /events:
    get:
      tags: [Event]
      summary: Get all events
      description: Mendapatkan semua event (ATTENDEE melihat semua, EVENT_ORGANIZER melihat milik sendiri)
      operationId: getAllEvents
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Event]
      summary: Create new event
      description: Membuat event baru (hanya EVENT_ORGANIZER)
      operationId: createEvent
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      requestBody:
        $ref: '#/components/requestBodies/EventCreateRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'

  /events/{event_id}:
    get:
      tags: [Event]
      summary: Get event by ID
      description: Mendapatkan detail event berdasarkan ID
      operationId: getEventById
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      responses:
        '200':
          description: Event information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Event]
      summary: Update event
      description: Update event (hanya pemilik event)
      operationId: updateEvent
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      requestBody:
        $ref: '#/components/requestBodies/EventUpdateRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [Event]
      summary: Delete event
      description: Hapus event (hanya pemilik event)
      operationId: deleteEvent
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
           $ref: '#/components/responses/NotFound'

  # ================= EVENT PERIOD =================
  /events/{event_id}/periods:
    get:
      tags: [EventPeriod]
      summary: Get all periods for an event
      description: Mendapatkan semua periode untuk event tertentu
      operationId: getEventPeriods
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      responses:
        '200':
          description: List of event periods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventPeriod'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [EventPeriod]
      summary: Create new event period
      description: Membuat periode baru untuk event (hanya pemilik event)
      operationId: createEventPeriod
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      requestBody:
        $ref: '#/components/requestBodies/EventPeriodCreateRequest'
      responses:
        '201':
          description: Event period created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPeriod'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

  /periods/{period_id}:
    get:
      tags: [EventPeriod]
      summary: Get event period by ID
      description: Mendapatkan detail periode event berdasarkan ID
      operationId: getPeriodById
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/PeriodIdParam'
      responses:
        '200':
          description: Event period information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPeriod'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [EventPeriod]
      summary: Update event period
      description: Update periode event (hanya pemilik event)
      operationId: updateEventPeriod
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/PeriodIdParam'
      requestBody:
        $ref: '#/components/requestBodies/EventPeriodUpdateRequest'
      responses:
        '200':
          description: Event period updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPeriod'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [EventPeriod]
      summary: Delete event period
      description: Hapus periode event (hanya pemilik event)
      operationId: deleteEventPeriod
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/PeriodIdParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ================= EVENT TERMS =================
  /events/{event_id}/terms:
    get:
      tags: [EventTerms]
      summary: Get event terms
      description: Mendapatkan syarat dan ketentuan event
      operationId: getEventTerms
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      responses:
        '200':
          description: Event terms information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTerms'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [EventTerms]
      summary: Create event terms
      description: Membuat syarat dan ketentuan untuk event (hanya pemilik event)
      operationId: createEventTerms
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      requestBody:
        $ref: '#/components/requestBodies/EventTermsCreateRequest'
      responses:
        '201':
          description: Event terms created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTerms'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Event terms already exists

    put:
      tags: [EventTerms]
      summary: Update event terms
      description: Update syarat dan ketentuan event (hanya pemilik event)
      operationId: updateEventTerms
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      requestBody:
        $ref: '#/components/requestBodies/EventTermsUpdateRequest'
      responses:
        '200':
          description: Event terms updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTerms'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [EventTerms]
      summary: Delete event terms
      description: Hapus syarat dan ketentuan event (hanya pemilik event)
      operationId: deleteEventTerms
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/EventIdParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ================= TICKET TYPE =================
  /periods/{period_id}/ticket-types:
    get:
      tags: [TicketType]
      summary: Get all ticket types for a period
      description: Mendapatkan semua jenis tiket untuk periode tertentu
      operationId: getTicketTypes
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/PeriodIdParam'
      responses:
        '200':
          description: List of ticket types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags: [TicketType]
      summary: Create new ticket type
      description: Membuat jenis tiket baru untuk periode (hanya pemilik event)
      operationId: createTicketType
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/PeriodIdParam'
      requestBody:
        $ref: '#/components/requestBodies/TicketTypeCreateRequest'
      responses:
        '201':
          description: Ticket type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

  /ticket-types/{type_id}:
    get:
      tags: [TicketType]
      summary: Get ticket type by ID
      description: Mendapatkan detail jenis tiket berdasarkan ID
      operationId: getTicketTypeById
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/TypeIdParam'
      responses:
        '200':
          description: Ticket type information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [TicketType]
      summary: Update ticket type
      description: Update jenis tiket (hanya pemilik event)
      operationId: updateTicketType
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/TypeIdParam'
      requestBody:
        $ref: '#/components/requestBodies/TicketTypeUpdateRequest'
      responses:
        '200':
          description: Ticket type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'

    delete:
      tags: [TicketType]
      summary: Delete ticket type
      description: Hapus jenis tiket (hanya pemilik event)
      operationId: deleteTicketType
      security:
        - bearerAuth: []
      x-roles: [EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/TypeIdParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ================= TICKET =================
  /tickets:
    get:
      tags: [Ticket]
      summary: Get user tickets
      description: Mendapatkan tiket milik user (ATTENDEE) atau tiket untuk events milik organizer (EVENT_ORGANIZER)
      operationId: getUserTickets
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Ticket]
      summary: Purchase ticket
      description: Membeli tiket (hanya ATTENDEE)
      operationId: purchaseTicket
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE]
      requestBody:
        $ref: '#/components/requestBodies/TicketPurchaseRequest'
      responses:
        '201':
          description: Ticket purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Ticket sold out or not available

  /tickets/{ticket_id}:
    get:
      tags: [Ticket]
      summary: Get ticket by ID
      description: Mendapatkan detail tiket berdasarkan ID (hanya pemilik tiket atau organizer event)
      operationId: getTicketById
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE, EVENT_ORGANIZER]
      parameters:
        - $ref: '#/components/parameters/TicketIdParam'
      responses:
        '200':
          description: Ticket information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Ticket]
      summary: Cancel ticket
      description: Batalkan tiket (soft delete - hanya pemilik tiket)
      operationId: cancelTicket
      security:
        - bearerAuth: []
      x-roles: [ATTENDEE]
      parameters:
        - $ref: '#/components/parameters/TicketIdParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    EventIdParam:
      name: event_id
      in: path
      required: true
      description: ID dari event
      schema:
        type: integer
        minimum: 1
      example: 1

    PeriodIdParam:
      name: period_id
      in: path
      required: true
      description: ID dari event period
      schema:
        type: integer
        minimum: 1
      example: 1

    TypeIdParam:
      name: type_id
      in: path
      required: true
      description: ID dari ticket type
      schema:
        type: integer
        minimum: 1
      example: 1

    TicketIdParam:
      name: ticket_id
      in: path
      required: true
      description: ID dari ticket
      schema:
        type: integer
        minimum: 1
      example: 1

    CategoryIdParam:
      name: category_id
      in: path
      required: true
      description: ID dari kategori event
      schema:
        type: integer
        minimum: 1
      example: 1

    UserIdParam:
      name: user_id
      in: path
      required: true
      description: ID dari user
      schema:
        type: integer
        minimum: 1
      example: 1

    OrganizerId:
      name: organizer_id
      in: path
      required: true
      description: ID dari organizer
      schema:
        type: integer
        minimum: 1
      example: 1

    TermsIdParam:
      name: terms_id
      in: path
      required: true
      description: ID dari syarat dan ketentuan
      schema:
        type: integer
        minimum: 1
      example: 1

  responses:
    LoginSuccess:
      description: Login berhasil
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: JWT access token
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              token_type:
                type: string
                example: "Bearer"
              expires_in:
                type: integer
                description: Token expiration time in seconds
                example: 3600

    Unauthorized:
      description: Unauthorized - Token tidak valid atau tidak ada
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            message: "Invalid or missing authentication token"
            statusCode: 401

    Forbidden:
      description: Forbidden - User tidak memiliki permission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Forbidden"
            message: "You don't have permission to access this resource"
            statusCode: 403

    NotFound:
      description: Resource tidak ditemukan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Not Found"
            message: "Resource not found"
            statusCode: 404

    BadRequest:
      description: Bad Request - Input tidak valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Bad Request"
            message: "Invalid input data"
            statusCode: 400

    NoContent:
      description: No Content - Operasi berhasil tanpa response body

  requestBodies:
    LoginRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email:
                type: string
                format: email
                description: Email user
                example: "user@example.com"
              password:
                type: string
                minLength: 6
                description: Password user
                example: "password123"

    UserUpdateRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: Email baru user
                example: "newemail@example.com"

    UserProfileCreateRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [first_name, last_name, date_of_birth, gender, phone_number, password, role]
            properties:
              first_name:
                type: string
                maxLength: 51
                description: Nama depan
                example: "John"
              last_name:
                type: string
                maxLength: 51
                description: Nama belakang
                example: "Doe"
              date_of_birth:
                type: string
                format: date
                description: Tanggal lahir
                example: "1990-01-01"
              gender:
                $ref: '#/components/schemas/Gender'
              phone_number:
                type: string
                maxLength: 14
                description: Nomor telepon
                example: "+6281234567890"
              password:
                type: string
                minLength: 6
                maxLength: 255
                description: Password
                example: "password123"
              role:
                $ref: '#/components/schemas/Role'

    UserProfileUpdateRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                type: string
                maxLength: 51
                description: Nama depan
                example: "John"
              last_name:
                type: string
                maxLength: 51
                description: Nama belakang
                example: "Doe"
              date_of_birth:
                type: string
                format: date
                description: Tanggal lahir
                example: "1990-01-01"
              gender:
                $ref: '#/components/schemas/Gender'
              phone_number:
                type: string
                maxLength: 14
                description: Nomor telepon
                example: "+6281234567890"
              password:
                type: string
                minLength: 6
                maxLength: 255
                description: Password baru
                example: "newpassword123"

    EventOrganizerCreateRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name]
            properties:
              name:
                type: string
                maxLength: 127
                description: Nama organizer
                example: "Amazing Events Co."

    EventOrganizerUpdateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               name:
                 type: string
                 maxLength: 127
                 description: Nama organizer
                 example: "Amazing Events Co."

    EventCreateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             required: [category_id, title, description, location]
             properties:
               category_id:
                 type: integer
                 description: ID kategori event
                 example: 1
               title:
                 type: string
                 maxLength: 255
                 description: Judul event
                 example: "Tech Conference 2024"
               description:
                 type: string
                 description: Deskripsi event
                 example: "Annual technology conference featuring latest innovations"
               location:
                 type: string
                 maxLength: 255
                 description: Lokasi event
                 example: "Jakarta Convention Center"

    EventUpdateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               category_id:
                 type: integer
                 description: ID kategori event
                 example: 1
               title:
                 type: string
                 maxLength: 255
                 description: Judul event
                 example: "Tech Conference 2024"
               description:
                 type: string
                 description: Deskripsi event
                 example: "Annual technology conference featuring latest innovations"
               location:
                 type: string
                 maxLength: 255
                 description: Lokasi event
                 example: "Jakarta Convention Center"
               status:
                 $ref: '#/components/schemas/EventStatus'

    EventPeriodCreateRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [name, start_date, end_date, start_time, end_time, capacity]
            properties:
               name:
                 type: string
                 maxLength: 255
                 description: Nama periode
                 example: "Day 1 - Morning Session"
               start_date:
                 type: string
                 format: date
                 description: Tanggal mulai
                 example: "2024-06-01"
               end_date:
                 type: string
                 format: date
                 description: Tanggal selesai
                 example: "2024-06-01"
               start_time:
                 type: string
                 format: time
                 description: Waktu mulai
                 example: "09:00:00"
               end_time:
                 type: string
                 format: time
                 description: Waktu selesai
                 example: "12:00:00"
               capacity:
                 type: integer
                 minimum: 1
                 description: Kapasitas peserta
                 example: 500

    EventPeriodUpdateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               name:
                 type: string
                 maxLength: 255
                 description: Nama periode
                 example: "Day 1 - Morning Session"
               start_date:
                 type: string
                 format: date
                 description: Tanggal mulai
                 example: "2024-06-01"
               end_date:
                 type: string
                 format: date
                 description: Tanggal selesai
                 example: "2024-06-01"
               start_time:
                 type: string
                 format: time
                 description: Waktu mulai
                 example: "09:00:00"
               end_time:
                 type: string
                 format: time
                 description: Waktu selesai
                 example: "12:00:00"
               capacity:
                 type: integer
                 minimum: 1
                 description: Kapasitas peserta
                 example: 500
               status:
                 $ref: '#/components/schemas/PeriodStatus'

    EventTermsCreateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             required: [description]
             properties:
               description:
                 type: string
                 description: Syarat dan ketentuan event
                 example: "1. Peserta wajib hadir tepat waktu\n2. Dilarang membawa makanan dari luar\n3. Wajib menggunakan masker"

    EventTermsUpdateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               description:
                 type: string
                 description: Syarat dan ketentuan event
                 example: "1. Peserta wajib hadir tepat waktu\n2. Dilarang membawa makanan dari luar\n3. Wajib menggunakan masker"

    TicketTypeCreateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             required: [name, price, quota]
             properties:
               name:
                 $ref: '#/components/schemas/TicketTypeName'
               price:
                 type: number
                 format: double
                 minimum: 0
                 description: Harga tiket
                 example: 150000.00
               discount:
                 type: number
                 format: double
                 minimum: 0
                 maximum: 100
                 description: Diskon dalam persen
                 example: 10.00
               quota:
                 type: integer
                 minimum: 1
                 description: Kuota tiket
                 example: 100

    TicketTypeUpdateRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               name:
                 $ref: '#/components/schemas/TicketTypeName'
               price:
                 type: number
                 format: double
                 minimum: 0
                 description: Harga tiket
                 example: 150000.00
               discount:
                 type: number
                 format: double
                 minimum: 0
                 maximum: 100
                 description: Diskon dalam persen
                 example: 10.00
               quota:
                 type: integer
                 minimum: 1
                 description: Kuota tiket
                 example: 100
               status:
                 $ref: '#/components/schemas/TicketTypeStatus'

    TicketPurchaseRequest:
       required: true
       content:
         application/json:
           schema:
             type: object
             required: [type_id]
             properties:
               type_id:
                 type: integer
                 description: ID jenis tiket yang akan dibeli
                 example: 1

  schemas:
    # Enums
    Gender:
      type: string
      enum: [MALE, FEMALE]
      description: Jenis kelamin
      example: MALE

    Role:
      type: string
      enum: [ATTENDEE, EVENT_ORGANIZER]
      description: Role user dalam sistem
      example: ATTENDEE

    EventStatus:
      type: string
      enum: [ACTIVE, INACTIVE, COMPLETED]
      description: Status event
      example: ACTIVE

    PeriodStatus:
      type: string
      enum: [UPCOMING, ONGOING, COMPLETED]
      description: Status periode event
      example: UPCOMING

    TicketTypeName:
      type: string
      enum: [VIP, REGULAR, EARLY_BIRD]
      description: Nama jenis tiket
      example: REGULAR

    TicketTypeStatus:
      type: string
      enum: [AVAILABLE, SOLD_OUT]
      description: Status ketersediaan tiket
      example: AVAILABLE

    # Error Response
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Jenis error
        message:
          type: string
          description: Pesan error detail
        statusCode:
          type: integer
          description: HTTP status code
      required: [error, message, statusCode]

    # Main Schemas
    User:
      type: object
      properties:
        user_id:
          type: integer
          description: ID unik user
          example: 1
        email:
          type: string
          format: email
          description: Email user
          example: "user@example.com"
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan akun
          example: "2024-01-01T00:00:00Z"
      required: [user_id, email, created_at]

    UserProfile:
      type: object
      properties:
        profile_id:
          type: integer
          description: ID unik profil
          example: 1
        user_id:
          type: integer
          description: ID user pemilik profil
          example: 1
        first_name:
          type: string
          description: Nama depan
          example: "John"
        last_name:
          type: string
          description: Nama belakang
          example: "Doe"
        date_of_birth:
          type: string
          format: date
          description: Tanggal lahir
          example: "1990-01-01"
        gender:
          $ref: '#/components/schemas/Gender'
        phone_number:
          type: string
          description: Nomor telepon
          example: "+6281234567890"
        role:
          $ref: '#/components/schemas/Role'
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan profil
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu update terakhir
          example: "2024-01-01T00:00:00Z"
      required: [profile_id, user_id, first_name, last_name, date_of_birth, gender, phone_number, role, created_at, updated_at]

    EventOrganizer:
      type: object
      properties:
        organizer_id:
          type: integer
          description: ID unik organizer
          example: 1
        user_id:
          type: integer
          description: ID user pemilik organizer
          example: 1
        name:
          type: string
          description: Nama organizer
          example: "Amazing Events Co."
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan organizer
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu update terakhir
          example: "2024-01-01T00:00:00Z"
      required: [organizer_id, user_id, name, created_at, updated_at]

    EventCategory:
      type: object
      properties:
        category_id:
          type: integer
          description: ID unik kategori
          example: 1
        name:
          type: string
          maxLength: 127
          description: Nama kategori
          example: "Technology"
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu pembaruan terakhir
          example: "2024-01-01T00:00:00Z"
      required: [category_id, name, created_at, updated_at]

    Event:
      type: object
      properties:
        event_id:
          type: integer
          description: ID unik event
          example: 1
        organizer_id:
          type: integer
          description: ID organizer event
          example: 1
        category_id:
          type: integer
          description: ID kategori event
          example: 1
        title:
          type: string
          maxLength: 255
          description: Judul event
          example: "Tech Conference 2024"
        description:
          type: string
          description: Deskripsi event
          example: "Annual technology conference featuring latest innovations"
        location:
          type: string
          maxLength: 255
          description: Lokasi event
          example: "Jakarta Convention Center"
        status:
          $ref: '#/components/schemas/EventStatus'
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu pembaruan terakhir
          example: "2024-01-01T00:00:00Z"
        organizer:
          $ref: '#/components/schemas/EventOrganizer'
        category:
          $ref: '#/components/schemas/EventCategory'
      required: [event_id, organizer_id, category_id, title, description, location, status, created_at, updated_at]

    EventPeriod:
      type: object
      properties:
        period_id:
          type: integer
          description: ID unik periode
          example: 1
        event_id:
          type: integer
          description: ID event
          example: 1
        name:
          type: string
          maxLength: 255
          description: Nama periode
          example: "Day 1 - Morning Session"
        start_date:
          type: string
          format: date
          description: Tanggal mulai
          example: "2024-06-01"
        end_date:
          type: string
          format: date
          description: Tanggal selesai
          example: "2024-06-01"
        start_time:
          type: string
          format: time
          description: Waktu mulai
          example: "09:00:00"
        end_time:
          type: string
          format: time
          description: Waktu selesai
          example: "12:00:00"
        capacity:
          type: integer
          minimum: 1
          description: Kapasitas peserta
          example: 500
        status:
          $ref: '#/components/schemas/PeriodStatus'
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu pembaruan terakhir
          example: "2024-01-01T00:00:00Z"
        event:
          $ref: '#/components/schemas/Event'
      required: [period_id, event_id, name, start_date, end_date, start_time, end_time, capacity, status, created_at, updated_at]

    EventTerms:
      type: object
      properties:
        terms_id:
          type: integer
          description: ID unik syarat dan ketentuan
          example: 1
        event_id:
          type: integer
          description: ID event
          example: 1
        description:
          type: string
          description: Syarat dan ketentuan event
          example: "1. Peserta wajib hadir tepat waktu\n2. Dilarang membawa makanan dari luar\n3. Wajib menggunakan masker"
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu pembaruan terakhir
          example: "2024-01-01T00:00:00Z"
        event:
          $ref: '#/components/schemas/Event'
      required: [terms_id, event_id, description, created_at, updated_at]

    TicketType:
      type: object
      properties:
        type_id:
          type: integer
          description: ID unik jenis tiket
          example: 1
        period_id:
          type: integer
          description: ID periode event
          example: 1
        name:
          $ref: '#/components/schemas/TicketTypeName'
        price:
          type: number
          format: double
          minimum: 0
          description: Harga tiket
          example: 150000.00
        discount:
          type: number
          format: double
          minimum: 0
          maximum: 100
          description: Diskon dalam persen
          example: 10.00
        quota:
          type: integer
          minimum: 1
          description: Kuota tiket
          example: 100
        status:
          $ref: '#/components/schemas/TicketTypeStatus'
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu pembaruan terakhir
          example: "2024-01-01T00:00:00Z"
        period:
          $ref: '#/components/schemas/EventPeriod'
      required: [type_id, period_id, name, price, quota, status, created_at, updated_at]

    Ticket:
      type: object
      properties:
        ticket_id:
          type: integer
          description: ID unik tiket
          example: 1
        user_id:
          type: integer
          description: ID user pemilik tiket
          example: 1
        type_id:
          type: integer
          description: ID jenis tiket
          example: 1
        purchase_date:
          type: string
          format: date-time
          description: Tanggal pembelian tiket
          example: "2024-05-01T10:30:00Z"
        created_at:
          type: string
          format: date-time
          description: Waktu pembuatan
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Waktu pembaruan terakhir
          example: "2024-01-01T00:00:00Z"
        user:
          $ref: '#/components/schemas/User'
        type:
          $ref: '#/components/schemas/TicketType'
      required: [ticket_id, user_id, type_id, purchase_date, created_at, updated_at]
